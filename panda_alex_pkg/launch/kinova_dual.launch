<launch>
    

  <!-- We do not have a real robot connected, so publish fake joint states via a joint_state_publisher
        MoveIt's fake controller's joint states are considered via the 'source_list' parameter -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- START -->
  <!-- Load universal robot description format (URDF) -->
  <param name="robot_description" command="xacro  '$(find kortex_description)/robots/dual_kortex.xacro'"/>

  <!-- The semantic description that corresponds to the URDF -->
  <arg name="prefix" value="left_"/>
  <param name="robot_description_semantic" command="$(find xacro)/xacro $(find gen3_lite_gen3_lite_2f_move_it_config)/config/gen3_lite_dual.srdf.xacro"/>

  <group ns="robot_description_kinematics">
    <rosparam command="load" file="$(find gen3_lite_gen3_lite_2f_move_it_config)/config/dual_kinematics.yaml"/>
  </group>

  <!-- STOP -->
  <arg name="command_args" value="-d $(find gen3_lite_gen3_lite_2f_move_it_config)/launch/moveit.rviz" />
  <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false" args="$(arg command_args)" output="screen" />


  <node name="dual_kinova_planner" pkg="panda_alex_pkg" type="dual_kinova_planner"/>

</launch>
